Hellooooooo gophers! I hope you are enjoying gophercon so far.
Today we're going to dive into my favorite topic: go and windows!
Many of you may already know that go is awesome for cross platform development
and I'll touch on the whys and hows later. What I really want to share with you all
is how you can improve the user experience of your app on Windows and lure
windows devs into contributing to your project.

Why am I talking about Windows? Go has xplat support, aren't we good? Can't we just stop there?

Let me give you a little bit of my own background and experience with windows development. Back in the day,
my dev machine was Windows, I used an all MS stack, coded in visual studio, deployed to windows server and
my users were all on Windows as well. It was a bit of a bubble, comfy but a bubble. On the flip side,
the other half had linux dev machines, used a much more heterogeneous stack, most of it taking advantage of
open source software, coded in a text editor, deployed to multiple linux distros and supported a
user base that often looked pretty similar to them. While there certainly were cross platform applications,
most users I knew were either in one camp or the other, and didn't much care what the other side was up to.

If you think the world is still like that today, its not. My dev machine is a mac,
I write services and apps in multiple languages that all work together (go, ruby, javascript, python),
I still run Visual Studio for my C# development, but only through parallels, I deploy to linux servers, docker containers,
multiple clouds, and I support my users on linux, mac and windows. While I'd like to think that I'm a super special snowflake, pretty sure I'm not! :-)

Here's my take on how this shift occurred. For me, it all started with git. SVN wasn't cutting anymore
and I installed msysgit on my windows machine. Then I needed to do front-end development,
and installed npm, bower and grunt. And a lot of these tools just worked better on linux, and hey
what do you know, not only do those shiny macs now support dual booting into windows,
but they have bash, and most of these tools just worked without all the odd quirks when I'd run them on windows.
Overall the developer experience on the "other side" was just better. Don't get me wrong, VS is still the bees knees,
but that was just one little part of a much bigger pie at that point. Did you see what just dropped last week?
.net core 1.0, C# on mac, linux and windows, without mono, without visual studio, just open up your favorite text editor,
atom, vim and you're in business. Personally, I don't think MS decided to do this for altruistic reasons. I think they saw
devs like me, leaving the nest and the only way to stay relevant was to stop living in the bubble and
go where the devs are.

The walls between our communities are crumbling down and there's a horde of windows devs are coming over to play.

So again, who cares?


Well? A lot of tools and applications are still written "linux first", compiles for windows and then "well I hope it works!".
When we just do that, this is the result. <spongebob slide>

I've found some cool new tool or app that I want to use on my windows machine. It "cross platform", should work right?

eeeeh not so much. There's no installer, but I can copy a rando binary or build it myself. It works great on a mac, not so much on windows.
I head over to the documentation, and they only have examples for bash. Oh wait, I found a bug! No problem I'll just submit a PR....
but I can't build on windows. Erm, maybe this isn't really cross platform and they don't really want me here.

THis is not where I want to be, this is what I'm trying to fight.

So again, why bother? I don't care about those smelly windows people, it's their fault for not being cool like me, right?
Wrong. We bother because we care (or we're paid to care). If you spend weeks or months developing something, you'd like everyone to use it and think it's awesome too.
Not have some awful spongebob experience.

Me, personally? I care. Sure, Rackspace is kind of paying me to care but I do regardless. I'm on our developer experience team, where not only
am I responsible for a couple projects but I sort of our resident windows ambassador and/or apologist depending on how well my day is going.
So I work with my teammates to ensure that their project also isn't a sucky exprience on windows.

I'm about to give you some advice for go on windows, I swear it's coming!, and here's where I've tried all this out. My favorite
is the dvm, the docker version manager. You've got a python version mangaer, a node version manager, so of course docker needs one too!
And it worked great, on mac and linux. because it original was a bash script.
So this was my head first dive into go. Never written anything with it before and my first PR to dvm was rewriting the entire thing in go. fun times.

Carina, was originally written in go, and we were taking advantage of the cross compilation but guess what?
It compiled but had quirky bugs that only showed up on windows. oops!

I've also helped out with another go project, rack, where I added windows installer so that when we had doc that said "go install it with homebrew,
ooh soo easy", we could have a similyary awesome expdrience on widnows.

Those are my street creds. :-) I'm still kind of new to go, but not building go apps on windows.

Alrighty, let's talk about go! Go's support for xplat is a bit deceptive. It seems like it's just as easy and GOOS windows and you're done but there's more.
That's just the foundation of what I consider first class windows support. Just like maslow's heirarchy of needs, xplat the equivalent of survival but I want more.

So let's see just how easy it is. TADA! I built my magical app for windows. This is why I loooove go for xplat.

But wait go has more goodies! conditional compilation. Sometimes, you need different logic or values on based on the os or arch and this is how you do it.
Essentally you separate out into differents files, what code should be compiled for a particlar os and arch. Go is smart, it can figure it out based
on the file extension, but comments are more flexible. Checkout magic.nix.go, go has no clue what "nix" is, but the comment says
"nix is anything that ain't windows", targeting both mac and linux and all the other non windows os's out there.

Let's take a look. In my magical app, I need a magical file path and it's different for windows and everything else.
On "nix", I use bash and store files in the HOME directory.
On windows, I use powershell and store files in my user profile directory.
WHen I run "go build", depending on which OS I'm targeting, go will build in the approrpirate function definition.
Pretty straightforward though it can result in a lot of files.

That's how go does it's thing, the rest is up to you. In order to support windows, it really helps to understand some of the differeences and quirks on windows.
First, environment variables. Say you want to store files in the users's home directory, on windows, you have a few options for that. The simpliest,
is just use USERPRIFLE in placeh ome. done. That ends up being something like C:\Users\Carolyn. Depending on what youa re aiming for, that may be just fine.
Windows has 2 other places of interest, appdata where applications are encouraged to store files and is avaialbe to that user on ANY machine, and local
appdata which is just for that particular machine.

Next is path. yay! they are both called path, I don't need to do anytyhing different rigth? wrong! nix uses colons and win uses semi-colons.

Shell is a fun one. On nix it tells you the preferred shell. But that normally isn't defined on windows, so figuring out when to use powershell or cmd can be a challenge.

TMPDIR points to a location where I can work with temporary files, such as /tmp, on windows you can either use tmp or temp, they both contain the same value.
So pick one based on however much you love or hate vowels.

This last one isn't well known but quite useful. PATHEXT contains a list of common file extensions to look for when a user executes a command without a
 file extension. So if I have a binary called magic.exe, I can run it simply by typing magic, and windows will figure it out. This can come in handy when
 writing xplat scripts.

Next up, the dreaded file paths. Most people exect this to be the worst part of supporting windows, when in fact, it isn't so bad in go or in general.
Just stick with using the filepath library, and on the go side you are all set. Fun fact, most of windows doesn't care if you use forward or back slashes. Not all windows tools are cool with it, but windows is.
When you are scripting, just quote your file paths. It's quite common on windows to have whitespaces in paths, annoying but easy to deal with.
Also I'm pretty excited about this,  windows 10 has removed the 260 character file path limit. If you've never run into that before, good for you.
But if you ever say used npm 2 (not 3) on windows, uh it totally broke everything. They would create heavily nested paths in node_modules that were "undeletable".
Not using file explorer, powershell, cmd, bash, commands like git clean would fail... fun times. For the longest time, npm's reation to this was specatularly unhelpful.
This is a perfect example of "supporting" windows while comletely
falling on your face. and in some cases, screwing over your windows users. So I'm very happy to have this booby trap removed.

So from a code perspective, we are pretty solid. What's the next level? User experience, what can we do to make it better.

Documentation! I salute everyone who writes documentation, it's important and often undervalued. Key areas that impact the windows experience is
how to install, how to use and how to contribute. Heck, just letting people know that we support windows, that it should work and let us know if it doesn't, helps.

Here's an example of how I like to document installation commands. As you start to support more than on os, you also end up
supporting more than one shell and usually more than one package manager. Also I like to use the shell prompt to subtly indicate if the command
is bash (a dollar sigh or powershell (a greater than sign).

A quick note about documentation and shells. At some point, you're going to want to document a command,
and it helps to be aware that On Windows, there are a number of shells out there:
* cmd - everyone knows it, everone has it, but it too limited to use in most cases.
* powershell - more powerful than cmd, which can feel a bit quirky at first if you aren't used to its object oriented design.
  FYI, there multiple versions of powershell out in the wild, my recommnedation is to target powershell 4+
  which gives you a good set of functionality while still being widely available.
* bash - usually available on dev machines, but not for non-dev users and you got to watch out as bash isn't 100% the same on windows.

If you have an installable application, i.e. not a library, provide an installer. You can try to get by on "go install", but that only works for developers and
even then, isn't my favorite installation experience. Luckily making a windows installer is very easy, there's a package manager chocolatey, that is like apt-get
or homebrew for windows. Then installing is a simple as choco install magic.

At the very least, provide an installation script. You can do magical piping into shell on windows.

Here's what chocolatey looks like. I define my package with a nuspec file, set some metadata and then specify the file(s) to distribute.
To ship it, it's just 2 commands, first package it up then push it to chocolatey.org
Now when a user wants to try out your app, they just use choco install, the binary is immediately available on their PATH and it just works.

Now, here's an example of a installation shell script. First I check if they have PS 4+, I download my binary and then print instructions for
how to add it to their path.

Alright! We are doing really well. We have cross platform code, we have users, yay! Now let's make life easier for ourselves and any brave souls who want
to helps us maintain the project.

If you want people to contribute to your project, help fix bugs, add features, they need to be able to build it on their machine.

For every project I work on, my goal is that anyone can just clone, run one script and they are all set. Preferably it handles obtaining any extra
build tools, like a dependency manager if missing. At the very least, let people know if the doc of any required build tools.

Let's take a short detour here to talk about build scripts. It's usually not enough to have the programming language installed. Build scripts are written
either in  a shell script such as bash or using a specialized build tool like make. Aaaaand that isn't a huge problem for win devs! Because lolnix.
lolnix is my made up term for a linux-like environment on windows, which whether they know it or not, most windows devs have already! So where did it come from?
GIT! Any windows developer who has git, also has lolnix. At the bare minimum, they have installed "Git for Windows", which comes
with bash and a bunch of other tools like grep, cat, sed, awk, etc.
Another way to get lolnix is by installing cygwin or my favorite, Git for Windows SDK. The SDK provides everything from Git for Windows but also comes
with a package manager, pacman. And with pacman you can easily install other tools, like make! So the ability to run a bash script or have make installed,
isn't in my mind an unreasonable ask.

Here's a simple Makefile for building our magic application. It ensures that our dependency manager, in this case glide, is installed before retrieving our dependencies.
Then has targets to either build a specific platform, or build all the things.

Alternatively, this is a bash script that does essentially the same thing, minus some of the nicities of make such as being able to execute a specific target.
This script again gets our depenencies then builds all the things.

Now on my pyramid, CI, continuous integration, is the final step. Don't take from this that I don't value CI. Only that you need the other layers in place before
tackling CI.

At this point, you may be asking "Do I _really_ need a Windows build?"
Hmm. Do you need it? No. Do you want it? Oh hell, yes. Consider it a gift to yourself.
By automating things that you don't do often, like build or run your app on Windows, you can write it once then promptly forget it. :-)
Also since I'm sure you made a chocolatey package, right? right?, this is the perfect place to automatically publish new versions.
